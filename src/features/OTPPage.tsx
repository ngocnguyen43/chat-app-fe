import React from 'react';
import Spinner from '../components/atoms/Spinner';
import { useAppDispatch, useAppSelector } from '../hooks';
import { useNavigate } from 'react-router-dom';
import { clearAccount } from '../store/account-slice';
import { usePassword } from '../hooks/usePassword';
import { useValidate2FA } from '../hooks/useValidate2FA';

let currentIndex = 0;
export default function OTPPage() {
  const [otp, setOtp] = React.useState<string[]>(new Array(6).fill(''));
  const [activeOTPIndex, setActiveOTPIndex] = React.useState<number>(0);
  const inputRef = React.useRef<React.ElementRef<'input'>>(null);
  const sectionRef = React.useRef<React.ElementRef<'section'>>(null);
  const navigate = useNavigate();
  const dispacth = useAppDispatch();
  const { mutate: loginPassword, isPending: isPasswordPending } = usePassword();
  const { mutate: validate2FA, isPending: isValidate2FAPending } = useValidate2FA();
  const { password } = useAppSelector((state) => state.account);
  const { '2fa': mf } = useAppSelector((state) => state.authOptions);
  const handleOnChange = React.useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      event.preventDefault();
      const newOTP: string[] = [...otp];
      const value = event.target.value;
      newOTP[currentIndex] = value.substring(value.length - 1);
      if (!value) {
        setActiveOTPIndex(currentIndex - 1);
      } else {
        setActiveOTPIndex(currentIndex + 1);
      }
      setOtp([...newOTP]);
      if (newOTP.join('').length === 6 && newOTP.indexOf('') === -1) {
        inputRef.current?.blur();
        validate2FA(newOTP.join(''), {
          onSuccess: () => {
            loginPassword(password as string);
          },
        });
      }
    },
    [loginPassword, otp, password, validate2FA],
  );
  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>, index: number) => {
    currentIndex = index;
    if (event.key === 'Backspace') {
      setActiveOTPIndex(index - 1);
    }
  };
  React.useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, [activeOTPIndex]);
  React.useEffect(() => {
    document.title = 'Verify';
  }, []);
  React.useEffect(() => {
    if (!mf) {
      dispacth(clearAccount());
      navigate('/signin');
    }
  }, [dispacth, mf, navigate]);
  return (
    <section className="flex items-center justify-center" ref={sectionRef}>
      <div className="bg-white py-10 flex flex-col items-center justify-center rounded-2xl gap-10 relative">
        <div className="flex flex-col gap-4 items-center justify-center px-5">
          <h1 className="text-2xl font-bold ">Two-Factor authentication</h1>
          <h2 className="text-lg font-medium">Enter the 6-digit code generated by your app to confirm your login</h2>
        </div>
        <div className="flex w-full gap-8 items-center justify-center">
          {otp.map((_, index) => {
            return (
              <React.Fragment key={index}>
                <input
                  ref={index === activeOTPIndex ? inputRef : null}
                  type="number"
                  className="w-16 h-16 border-2 rounded bg-transparent outline-none text-center font-semibold text-xl spin-button-none border-gray-700 focus:border-gray-400 focus:text-gray-400 text-gray-400 transition"
                  onChange={handleOnChange}
                  value={otp[index]}
                  onKeyDown={(e) => handleKeyDown(e, index)}
                />
              </React.Fragment>
            );
          })}
          {isPasswordPending || isValidate2FAPending ? (
            <div className="absolute top-0 left-0 w-full h-full backdrop-blur-sm rounded-2xl flex items-center justify-center">
              <Spinner size="loading-lg" />
            </div>
          ) : null}
        </div>
      </div>
    </section>
  );
}
